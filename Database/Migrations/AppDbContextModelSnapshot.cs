// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Database.Entities.AcademicDegree", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AcademicDegrees");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Doctor"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Professor"
                        });
                });

            modelBuilder.Entity("Database.Entities.AcademicDegreePriceAssignation", b =>
                {
                    b.Property<DateTime>("AssignationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("AssignationDate");

                    b.Property<int>("ObjectIdentifier")
                        .HasColumnType("int")
                        .HasColumnName("ObjectIdentifier");

                    b.Property<double>("Value")
                        .HasColumnType("double")
                        .HasColumnName("Value");

                    b.HasKey("AssignationDate", "ObjectIdentifier");

                    b.HasIndex("ObjectIdentifier");

                    b.ToTable("AcademicDegreePriceAssignations");

                    b.HasData(
                        new
                        {
                            AssignationDate = new DateTime(2023, 5, 12, 2, 10, 36, 68, DateTimeKind.Local).AddTicks(718),
                            ObjectIdentifier = 1,
                            Value = 12.0
                        },
                        new
                        {
                            AssignationDate = new DateTime(2023, 5, 12, 2, 10, 36, 68, DateTimeKind.Local).AddTicks(763),
                            ObjectIdentifier = 2,
                            Value = 10.0
                        });
                });

            modelBuilder.Entity("Database.Entities.Contract", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ConfirmedByUserID")
                        .HasColumnType("int")
                        .HasColumnName("ConfirmedByUserID");

                    b.Property<int>("ConsultationsMaxTime")
                        .HasColumnType("int")
                        .HasColumnName("ConsultationsMaxTime");

                    b.Property<string>("ContractIdentifier")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ContractIdentifier");

                    b.Property<int>("ContractTypeID")
                        .HasColumnType("int");

                    b.Property<int>("CourseProjectsMaxTime")
                        .HasColumnType("int")
                        .HasColumnName("CourseProjectsMaxTime");

                    b.Property<int>("CreditsMaxTime")
                        .HasColumnType("int")
                        .HasColumnName("CreditsMaxTime");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<int>("DiplomasMaxTime")
                        .HasColumnType("int")
                        .HasColumnName("DiplomasMaxTime");

                    b.Property<int>("DiplomasReviewsMaxTime")
                        .HasColumnType("int")
                        .HasColumnName("DiplomasReviewsMaxTime");

                    b.Property<int>("ExamsMaxTime")
                        .HasColumnType("int")
                        .HasColumnName("ExamsMaxTime");

                    b.Property<int>("GraduatesAcademicWorkMaxTime")
                        .HasColumnType("int")
                        .HasColumnName("GraduatesAcademicWorkMaxTime");

                    b.Property<int>("GraduatesManagementMaxTime")
                        .HasColumnType("int")
                        .HasColumnName("GraduatesManagementMaxTime");

                    b.Property<int>("InternshipsMaxTime")
                        .HasColumnType("int")
                        .HasColumnName("InternshipsMaxTime");

                    b.Property<int>("InterviewsMaxTime")
                        .HasColumnType("int")
                        .HasColumnName("InterviewsMaxTime");

                    b.Property<int>("LaboratoryClassesMaxTime")
                        .HasColumnType("int")
                        .HasColumnName("LaboratoryClassesMaxTime");

                    b.Property<int>("LectionsMaxTime")
                        .HasColumnType("int")
                        .HasColumnName("LectionsMaxTime");

                    b.Property<int>("OtherTeachingClassesMaxTime")
                        .HasColumnType("int")
                        .HasColumnName("OtherTeachingClassesMaxTime");

                    b.Property<int?>("ParentContractID")
                        .HasColumnType("int")
                        .HasColumnName("ParentContractID");

                    b.Property<DateTime>("PeriodEnd")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("PlasticPosesDemonstrationMaxTime")
                        .HasColumnType("int")
                        .HasColumnName("PlasticPosesDemonstrationMaxTime");

                    b.Property<int>("PracticalClassesMaxTime")
                        .HasColumnType("int")
                        .HasColumnName("PracticalClassesMaxTime");

                    b.Property<int>("SECMaxTime")
                        .HasColumnType("int")
                        .HasColumnName("SECMaxTime");

                    b.Property<int>("TestingEscortMaxTime")
                        .HasColumnType("int")
                        .HasColumnName("TestingEscortMaxTime");

                    b.Property<int>("TestsAndReferatsMaxTime")
                        .HasColumnType("int")
                        .HasColumnName("TestsAndReferatsMaxTime");

                    b.Property<int>("UserID")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ID");

                    b.HasIndex("ConfirmedByUserID");

                    b.HasIndex("ContractIdentifier")
                        .IsUnique();

                    b.HasIndex("ContractTypeID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("ParentContractID")
                        .IsUnique();

                    b.HasIndex("UserID");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Database.Entities.ContractType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ContractTypes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Ordinary"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Advanced"
                        });
                });

            modelBuilder.Entity("Database.Entities.ContractTypePriceAssignation", b =>
                {
                    b.Property<DateTime>("AssignationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("AssignationDate");

                    b.Property<int>("ObjectIdentifier")
                        .HasColumnType("int")
                        .HasColumnName("ObjectIdentifier");

                    b.Property<double>("Value")
                        .HasColumnType("double")
                        .HasColumnName("Value");

                    b.HasKey("AssignationDate", "ObjectIdentifier");

                    b.HasIndex("ObjectIdentifier");

                    b.ToTable("ContractTypePriceAssignations");

                    b.HasData(
                        new
                        {
                            AssignationDate = new DateTime(2023, 5, 12, 2, 10, 36, 68, DateTimeKind.Local).AddTicks(861),
                            ObjectIdentifier = 1,
                            Value = 12.0
                        },
                        new
                        {
                            AssignationDate = new DateTime(2023, 5, 12, 2, 10, 36, 68, DateTimeKind.Local).AddTicks(889),
                            ObjectIdentifier = 2,
                            Value = 10.0
                        });
                });

            modelBuilder.Entity("Database.Entities.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "FITR"
                        },
                        new
                        {
                            ID = 2,
                            Name = "FTUG"
                        });
                });

            modelBuilder.Entity("Database.Entities.MonthReport", b =>
                {
                    b.Property<int>("Month")
                        .HasColumnType("int")
                        .HasColumnName("Month");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("Year");

                    b.Property<int>("ContractID")
                        .HasColumnType("int");

                    b.Property<int>("ConsultationsTime")
                        .HasColumnType("int")
                        .HasColumnName("ConsultationsTime");

                    b.Property<int>("CourseProjectsTime")
                        .HasColumnType("int")
                        .HasColumnName("CourseProjectsTime");

                    b.Property<int>("CreditsTime")
                        .HasColumnType("int")
                        .HasColumnName("CreditsTime");

                    b.Property<int>("DiplomasReviewsTime")
                        .HasColumnType("int")
                        .HasColumnName("DiplomasReviewsTime");

                    b.Property<int>("DiplomasTime")
                        .HasColumnType("int")
                        .HasColumnName("DiplomasTime");

                    b.Property<int>("ExamsTime")
                        .HasColumnType("int")
                        .HasColumnName("ExamsTime");

                    b.Property<int>("GraduatesAcademicWorkTime")
                        .HasColumnType("int")
                        .HasColumnName("GraduatesAcademicWorkTime");

                    b.Property<int>("GraduatesManagementTime")
                        .HasColumnType("int")
                        .HasColumnName("GraduatesManagementTime");

                    b.Property<int>("InternshipsTime")
                        .HasColumnType("int")
                        .HasColumnName("InternshipsTime");

                    b.Property<int>("InterviewsTime")
                        .HasColumnType("int")
                        .HasColumnName("InterviewsTime");

                    b.Property<int>("LaboratoryClassesTime")
                        .HasColumnType("int")
                        .HasColumnName("LaboratoryClassesTime");

                    b.Property<int>("LectionsTime")
                        .HasColumnType("int")
                        .HasColumnName("LectionsTime");

                    b.Property<int>("OtherTeachingClassesTime")
                        .HasColumnType("int")
                        .HasColumnName("OtherTeachingClassesTime");

                    b.Property<int>("PlasticPosesDemonstrationTime")
                        .HasColumnType("int")
                        .HasColumnName("PlasticPosesDemonstrationTime");

                    b.Property<int>("PracticalClassesTime")
                        .HasColumnType("int")
                        .HasColumnName("PracticalClassesTime");

                    b.Property<int>("SECTime")
                        .HasColumnType("int")
                        .HasColumnName("SECTime");

                    b.Property<int>("TestingEscortTime")
                        .HasColumnType("int")
                        .HasColumnName("TestingEscortTime");

                    b.Property<int>("TestsAndReferatsTime")
                        .HasColumnType("int")
                        .HasColumnName("TestsAndReferatsTime");

                    b.HasKey("Month", "Year", "ContractID");

                    b.HasIndex("ContractID");

                    b.ToTable("MonthReports");
                });

            modelBuilder.Entity("Database.Entities.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "SuperAdmin"
                        },
                        new
                        {
                            ID = 2,
                            Name = "User"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Database.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ConfirmedByUserID")
                        .HasColumnType("int")
                        .HasColumnName("ConfirmedByUserID");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Login");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Patronymic");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Surname");

                    b.HasKey("ID");

                    b.HasIndex("ConfirmedByUserID");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ConfirmedByUserID = 1,
                            Login = "admin",
                            Name = "admin",
                            PasswordHash = "!#/)zW��C�JJ��",
                            Patronymic = "admin",
                            RoleId = 1,
                            Surname = "admin"
                        });
                });

            modelBuilder.Entity("Database.Entities.UserAcademicDegreeAssignation", b =>
                {
                    b.Property<DateTime>("AssignationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("AssignationDate");

                    b.Property<int>("ObjectIdentifier")
                        .HasColumnType("int")
                        .HasColumnName("ObjectIdentifier");

                    b.Property<int>("Value")
                        .HasColumnType("int")
                        .HasColumnName("Value");

                    b.HasKey("AssignationDate", "ObjectIdentifier");

                    b.HasIndex("ObjectIdentifier");

                    b.HasIndex("Value");

                    b.ToTable("UserAcademicDegreeAssignations");

                    b.HasData(
                        new
                        {
                            AssignationDate = new DateTime(2023, 5, 12, 2, 10, 36, 68, DateTimeKind.Local).AddTicks(959),
                            ObjectIdentifier = 1,
                            Value = 1
                        });
                });

            modelBuilder.Entity("Database.Entities.AcademicDegreePriceAssignation", b =>
                {
                    b.HasOne("Database.Entities.AcademicDegree", "ObjectRef")
                        .WithMany("Assignations")
                        .HasForeignKey("ObjectIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AcademicDegree_AcademicDegreeValueAssignation");

                    b.Navigation("ObjectRef");
                });

            modelBuilder.Entity("Database.Entities.Contract", b =>
                {
                    b.HasOne("Database.Entities.User", "ConfirmedByUser")
                        .WithMany("ConfirmedContracts")
                        .HasForeignKey("ConfirmedByUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Contract_Confirmed_By_User");

                    b.HasOne("Database.Entities.ContractType", "ContractType")
                        .WithMany("Contracts")
                        .HasForeignKey("ContractTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Contract_ContractType");

                    b.HasOne("Database.Entities.Department", "Department")
                        .WithMany("Contracts")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Contracts_Departments");

                    b.HasOne("Database.Entities.Contract", "ParentContract")
                        .WithOne("ChildContract")
                        .HasForeignKey("Database.Entities.Contract", "ParentContractID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Contrcat_Contract");

                    b.HasOne("Database.Entities.User", "User")
                        .WithMany("Contracts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Contracts_Users");

                    b.Navigation("ConfirmedByUser");

                    b.Navigation("ContractType");

                    b.Navigation("Department");

                    b.Navigation("ParentContract");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Database.Entities.ContractTypePriceAssignation", b =>
                {
                    b.HasOne("Database.Entities.ContractType", "ObjectRef")
                        .WithMany("Assignations")
                        .HasForeignKey("ObjectIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ContractType_ContractTypeValueAssignation");

                    b.Navigation("ObjectRef");
                });

            modelBuilder.Entity("Database.Entities.MonthReport", b =>
                {
                    b.HasOne("Database.Entities.Contract", "Contract")
                        .WithMany("MonthReports")
                        .HasForeignKey("ContractID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Database.Entities.User", b =>
                {
                    b.HasOne("Database.Entities.User", "ConfirmedByUser")
                        .WithMany("ConfirmedUsers")
                        .HasForeignKey("ConfirmedByUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_User_Confirmed_By_User");

                    b.HasOne("Database.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Roles_Users");

                    b.Navigation("ConfirmedByUser");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Database.Entities.UserAcademicDegreeAssignation", b =>
                {
                    b.HasOne("Database.Entities.User", "ObjectRef")
                        .WithMany("Assignations")
                        .HasForeignKey("ObjectIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_User_UserAcademicDegreeAssignation");

                    b.HasOne("Database.Entities.AcademicDegree", "ValueRef")
                        .WithMany("UserAssignations")
                        .HasForeignKey("Value")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ObjectRef");

                    b.Navigation("ValueRef");
                });

            modelBuilder.Entity("Database.Entities.AcademicDegree", b =>
                {
                    b.Navigation("Assignations");

                    b.Navigation("UserAssignations");
                });

            modelBuilder.Entity("Database.Entities.Contract", b =>
                {
                    b.Navigation("ChildContract");

                    b.Navigation("MonthReports");
                });

            modelBuilder.Entity("Database.Entities.ContractType", b =>
                {
                    b.Navigation("Assignations");

                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Database.Entities.Department", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Database.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Database.Entities.User", b =>
                {
                    b.Navigation("Assignations");

                    b.Navigation("ConfirmedContracts");

                    b.Navigation("ConfirmedUsers");

                    b.Navigation("Contracts");
                });
#pragma warning restore 612, 618
        }
    }
}
